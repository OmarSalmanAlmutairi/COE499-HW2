from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes
from cryptography.hazmat.backends import default_backend
import os
import time

# Set your 128-bit AES key here (replace with your actual key)
key = bytes.fromhex('00112233445566778899aabbccddeeff')  # Example key

# AES uses a 16-byte (128-bit) IV
iv = os.urandom(16)

# AES constants for key expansion
RCON = [
    0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1B, 0x36,
]

# AES S-Box for the key expansion subroutine
S_BOX = [
    0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76,
    0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0,
    0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15,
    0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75,
    0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84,
    0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF,
    0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8,
    0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2,
    0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73,
    0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB,
    0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79,
    0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08,
    0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A,
    0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E,
    0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF,
    0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16
]


# Function to perform key expansion for AES-128 (manual key schedule)
def aes_key_expansion(key):
    round_keys = [list(key[i:i+4]) for i in range(0, 16, 4)]
    for i in range(4, 44):
        temp = round_keys[i-1]
        if i % 4 == 0:
            # Rotate temp bytes and apply S-box substitution
            temp = [S_BOX[b] for b in temp[1:] + temp[:1]]
            temp[0] ^= RCON[i // 4 - 1]
        round_keys.append([round_keys[i-4][j] ^ temp[j] for j in range(4)])
    return [b''.join(bytes([b]) for b in word) for word in round_keys]

# Write AES key and round keys to a file
def write_key_and_round_keys_to_file(key, round_keys, filename='aes_keys.txt'):
    with open(filename, 'w') as f:
        f.write(f"AES Key: {key.hex()}\n")
        f.write("AES Round Keys:\n")
        for i in range(0, len(round_keys), 4):
            f.write(f"Round {i//4}: {round_keys[i].hex()}\n")

# Generate AES round keys
round_keys = aes_key_expansion(key)

# Write AES key and round keys to the file
write_key_and_round_keys_to_file(key, round_keys)

cipher = Cipher(algorithms.AES(key), modes.CBC(iv), backend=default_backend())

# List of image files to encrypt (add your images here)
image_files = ['image1.bmp', 'image2.bmp']  # Add the paths to your images

# Infinite loop to keep encrypting
while True:
    encryptor = cipher.encryptor()  # Create a new encryptor for each loop
    encrypted_data = b''

    # Encrypt each image
    for image_file in image_files:
        with open(image_file, 'rb') as f:
            data = f.read()

            # Pad data to block size (16 bytes for AES)
            padding_length = 16 - (len(data) % 16)
            data += bytes([padding_length] * padding_length)

            # Encrypt the padded data
            encrypted_data += encryptor.update(data)

    # Finalize the encryption for the last block
    encrypted_data += encryptor.finalize()

    # Write the encrypted data to a single file
    with open('encrypted_images.bin', 'wb') as f:
        f.write(iv + encrypted_data)

    # Optional: Print a message to indicate an encryption cycle is complete
    print("Encryption complete. Sleeping for 1 second...")

    # Sleep for 1 second to prevent high CPU usage (adjust as needed)
    time.sleep(1)
